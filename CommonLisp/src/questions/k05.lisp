(defpackage :k05
    (:use :cl)
    (:export #:question-1 #:question-2 #:question-3 #:question-4))

(in-package :k05)

(load (merge-pathnames "shared/golem.lisp"))

(defun question-1 () 
    (destructuring-bind (age salary) 
        (loop for salary = 19.0 then (* 1.035 salary)
              for age = 22 then (1+ age)
              when (> salary 50.0)
              return (list age salary))
              (format t "~a歳で月給~a万円~%" age salary)))

(defun question-2 ()
    (print "起きろ～")
    (print "1．起きた　2．あと5分…　3．Zzzz… 入力：")
    (finish-output)
    (let ((message (loop for x = 0 then (parse-integer (read-line) :junk-allowed t)
                        do (print "起きろ～")
                        do (print "1．起きた　2．あと5分…　3．Zzzz… 入力：")
                        when (= x 1)
                        return "よし、学校へ行こう！")))
        (print message)))

(defun question-3 ()
    (loop for x = 0 then (parse-integer (read-line) :junk-allowed t)
          do (print "起きろ～")
          do (print "1．起きた　2．あと5分…　3．Zzzz… 入力：")
          when (= x 1)
          do (print "よし、学校へ行こう！")))

(defun input-damage (choice)
    (case choice
        (1 (+ 60 (random 40)))
        (2 (+ 30 (random 100)))
        (3 (+ 20 (random 180)))
        (otherwise
            (print "攻撃手段を選択してください（1．攻撃　2．特技　3．魔法）＞")
            (finish-output)
            (input-damage (parse-integer (read-line) :junk-allowed t)))))

(defun question-4 ()
    (let ((golem (golem:make-golem :hp (+ 300 (random 200)) :defense 80 :attack 50))
        (player-hp (+ (random 100) 200)))
    (format t "ゴーレム（HP：~a　防御力：~a）~%"
        (golem:golem-hp golem)
        (golem:golem-defense golem))
    (finish-output)
    (labels ((inner-loop (inner-golem inner-player-hp)
                (cond
                    ((and (= 0 (golem:golem-hp golem)) (/= 0 inner-player-hp))
                        (print "ゴーレムを倒しました！"))
                    ((and (/= 0 (golem:golem-hp golem)) (= 0 inner-player-hp))
                        (print "あなたはゴーレムに負けました！ゲームオーバー！"))
                    (t (format t "ゴーレム残りHP：~a~%" (golem:golem-hp golem))
                        (let ((damage (input-damage 0)))
                            (format t "基礎攻撃力は~aです。~%" damage)
                            (setf damage (if (< (- damage (golem:golem-defense golem)) 0) 0 (- damage (golem:golem-defense golem))))
                            (case damage
                                (0 (print "ゴーレム：「ハハハハハ、情けないな！貴様は弱すぎる！」")
                                    (format t "ゴーレムがあなたを攻撃しました！攻撃値：~a~%" (golem:golem-attack golem))
                                    (let* ((diff (- inner-player-hp (golem:golem-attack inner-golem)))
                                            (new-player-hp (if (< diff 0) 0 diff)))
                                            (format t "あなたの残りHPは：~a~%" new-player-hp)
                                            (inner-loop inner-golem new-player-hp)))
                                (otherwise (format t "ダメージは~aです。~%" damage)
                                            (let* ((diff (- (golem:golem-hp inner-golem) damage))
                                                    (new-golem-hp (if (< diff 0) 0 diff)))
                                                    (format t "残りのHPは~aです。~%" new-golem-hp)
                                                    (setf (golem:golem-hp inner-golem) new-golem-hp)
                                                    (inner-loop inner-golem inner-player-hp))))
                            )))))
        (inner-loop golem player-hp))))